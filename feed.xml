<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-12-28T17:30:11+08:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">react native 获取经纬度!</title><link href="/react/native/2018/12/28/react-native-location.html" rel="alternate" type="text/html" title="react native 获取经纬度!" /><published>2018-12-28T16:58:53+08:00</published><updated>2018-12-28T16:58:53+08:00</updated><id>/react/native/2018/12/28/react-native-location</id><content type="html" xml:base="/react/native/2018/12/28/react-native-location.html">&lt;p&gt;react native 获取经纬度很多方法，大致分为官方文档和第三方包这两种。 官方文档使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.geolocation&lt;/code&gt;, 这是基于浏览器标准的定位。但是使用这种方法有个很坑的地方，那就是android下需要有google框架。基于众所周知的原因，国内手机一般没有google框架。官网文档还推荐使用 &lt;a href=&quot;https://github.com/Agontuk/react-native-geolocation-service&quot;&gt; react-native-geolocation-service&lt;/a&gt; 但是我翻了下源码，这种方法貌似也需要使用google框架。
第二种方法是使用第三方包。这种方法的问题是，会引入第三方的地图sdk。如果只是为了获取经纬度，就显得有些鸡肋。
求人不如求己，这里记录下使用原生module获取经纬度提供给react native使用的过程。
废话不多说，show me the code。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import android.app.Activity;
import android.content.Intent;
import android.content.Context;
import android.location.LocationListener;
import android.support.annotation.Nullable;
import android.os.Bundle;
import java.util.List;
import android.net.Uri;
import android.location.Location;
import android.location.LocationManager;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.bridge.Promise;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.modules.core.DeviceEventManagerModule;


public class LocationModule extends ReactContextBaseJavaModule {

  private final ReactApplicationContext reactContext;

  private LocationManager locationManager;
  private String locationProvider;
  private Location location;

  public LocationModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  @Override
  public String getName() {
    return &quot;Location&quot;;
  }

  @ReactMethod
  public void getLocation(final Promise promise) {
    try {
      Activity currentActivity = getCurrentActivity();

      if( locationManager == null) {
        locationManager = (LocationManager) this.reactContext.getSystemService(Context.LOCATION_SERVICE);
      }
      List&amp;lt;String&amp;gt; providers = locationManager.getProviders(true);
        if (providers.contains(LocationManager.NETWORK_PROVIDER)){
            locationProvider = LocationManager.NETWORK_PROVIDER;
        }
        Location location = locationManager.getLastKnownLocation( locationProvider );
        if (location != null) {
            setLocation( location );
        } else {
          //如果是网络定位失败，使用gps
            if (providers.contains(LocationManager.GPS_PROVIDER)){
                //如果是GPS定位
                locationProvider = LocationManager.GPS_PROVIDER;
                 if (location != null) {
                    setLocation( location );
                }
            }
        }
        // TODO: add unsuport handle
      locationManager.requestLocationUpdates( locationProvider, 0, 0, locationListener );
    // promise.resolve(convertToJSON(providers));
      promise.resolve(convertLocationToJSON(this.location));

    } catch (Exception e) {
      promise.reject(&quot;err&quot;, e.toString());
    }
  }

LocationListener locationListener = new LocationListener() {
    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }
    @Override
    public void onProviderEnabled(String provider) {
    }
    @Override
    public void onProviderDisabled(String provider) {
    }
    // 如果位置发生变化，重新显示
    @Override
    public void onLocationChanged(Location location) {
        if (location != null) {
            setLocation(location);
            sendEvent(&quot;onLocation&quot;, convertLocationToJSON(location));
        }
    }
};

  @ReactMethod
  public void removeLocation() {
      locationManager.removeUpdates(locationListener);
  }

private void setLocation(Location location) {
    this.location = location;
}
    private WritableMap convertLocationToJSON(Location l) {
        WritableMap params = new WritableNativeMap();
        params.putDouble(&quot;latitude&quot;, l.getLatitude());
        params.putDouble(&quot;longitude&quot;, l.getLongitude());
        params.putDouble(&quot;accuracy&quot;, l.getAccuracy());
        params.putDouble(&quot;altitude&quot;, l.getAltitude());
        params.putDouble(&quot;bearing&quot;, l.getBearing());
        params.putString(&quot;provider&quot;, l.getProvider());
        params.putDouble(&quot;speed&quot;, l.getSpeed());
        params.putString(&quot;timestamp&quot;, Long.toString(l.getTime()));
        return params;
    }

    private void sendEvent(String eventName,
                       @Nullable WritableMap params) {
    this.reactContext
        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
        .emit(eventName, params);
    }

    private WritableMap convertToJSON(List&amp;lt;String&amp;gt; list) {
        WritableMap params = new WritableNativeMap();
        for(int i = 0; i&amp;lt; list.size(); i++) {
            params.putString(list.get(i), list.get(i));
        }
        return params;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中给locationListener注册了事件，当位置改变的时候，发送事件到js。&lt;/p&gt;

&lt;p&gt;js端的使用:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  DeviceEventEmitter.addListener('onLocation', (e) =&amp;gt; {
    console.log(e);
  });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">react native 获取经纬度很多方法，大致分为官方文档和第三方包这两种。 官方文档使用的是navigator.geolocation, 这是基于浏览器标准的定位。但是使用这种方法有个很坑的地方，那就是android下需要有google框架。基于众所周知的原因，国内手机一般没有google框架。官网文档还推荐使用 react-native-geolocation-service 但是我翻了下源码，这种方法貌似也需要使用google框架。 第二种方法是使用第三方包。这种方法的问题是，会引入第三方的地图sdk。如果只是为了获取经纬度，就显得有些鸡肋。 求人不如求己，这里记录下使用原生module获取经纬度提供给react native使用的过程。 废话不多说，show me the code。</summary></entry><entry><title type="html">react native spalsh!</title><link href="/react/native/2018/12/28/react-native-splash.html" rel="alternate" type="text/html" title="react native spalsh!" /><published>2018-12-28T16:42:53+08:00</published><updated>2018-12-28T16:42:53+08:00</updated><id>/react/native/2018/12/28/react-native-splash</id><content type="html" xml:base="/react/native/2018/12/28/react-native-splash.html">&lt;p&gt;react native 使用splash有很多方法，比如使用第三方package &lt;a href=&quot;https://www.npmjs.com/package/react-native-splash-screen&quot;&gt;react-native-splash-screen&lt;/a&gt;,但是这种方法需要引入依赖，有的还需要link，一点都不native。所以现在记录一个android下使用原生splash的方法，iOS下很简单只要用xcode create splash 就行。&lt;/p&gt;

&lt;p&gt;首先需要把作为splash的图片放到&lt;code class=&quot;highlighter-rouge&quot;&gt;/res/drawable&lt;/code&gt;目录下。
在&lt;code class=&quot;highlighter-rouge&quot;&gt;/values&lt;/code&gt;目录下的styles.xml中创建新的theme。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;style name=&quot;SplashTheme&quot; parent=&quot;AppTheme&quot;&amp;gt;
        &amp;lt;item name=&quot;android:windowBackground&quot;&amp;gt;@drawable/ic_bg_start&amp;lt;/item&amp;gt; // add source
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在配文件文件中使用修改mainactivity的theme。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;activity
      android:name=&quot;.MainActivity&quot;
      android:theme=&quot;@style/SplashTheme&quot; // here
      android:label=&quot;@string/app_name&quot;
      android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;
      android:windowSoftInputMode=&quot;adjustResize&quot;&amp;gt;
      &amp;lt;intent-filter&amp;gt;
          &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;
          &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;
      &amp;lt;/intent-filter&amp;gt;
    &amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后就可以愉快的使用了。&lt;/p&gt;</content><author><name></name></author><summary type="html">react native 使用splash有很多方法，比如使用第三方package react-native-splash-screen,但是这种方法需要引入依赖，有的还需要link，一点都不native。所以现在记录一个android下使用原生splash的方法，iOS下很简单只要用xcode create splash 就行。</summary></entry></feed>